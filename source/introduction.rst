 .. introduction.rst

======================
はじめに
======================

2016年6月３０日に、定年退職を迎えました。

私が現職中の頃は、まだ社会全体にゆとりがあったせいか、先輩諸氏は退職間際になると、
仲間だった者の所へ、挨拶に回っていらしてました。

私の時はと言うと、貧乏性でスケジュール・課題が詰まっていないと何となく落ち着かなく、
無謀にも、私自身が退職の前週まで作業予定を入れてしまい、作業に没頭してしまい、最後には
動きが全く取れず、恐れた通り、退職する当日まで資料のチェックに追われていました。

そうこうしている間に、あっという間に、1年が過ぎてしまいました。
この間には、病気が進行し、腰の曲がりも大きくなりました。
体の自由が利かなくなると、家にこもりがちになります。
家にいるようになるとついついパソコンの電源に手が伸びてしまいます。


この間は、以前から気になっていた下記事項を調査、検証、評価を行っていました。またどうしても
コメントすべきと思われる事項を考察しました。

+. Ruby,Ruby on Railsの最新状況確認
+. 差分開発方法論
+. 開発生産性と労働生産性のギャップ
+. Package or 手作りSystemとの対立軸？　master優先反映 or 都度リリースの対立？

+. \ **DevOps**\　の基本思想と全体概要
+. ドキュメント管理システムとバージョン管理（リリース管理）
  -. ドキュメントを考える
      -. Sphinx, Wiki etc.
      -. Sphinx ブロック図作成（BlockDiag）ツール
      -. Sphinx　Templateの継承
      -. 
 -. 分散リポジトリー
     -. Git/Hub
     -. Git
     -. 対象とするするドキュメントとドキュメント体系
     -. 要求されるBrunch戦略
+. Editor:Atomの評価確認
+. Task管理
  -. GTD（Getting Things Done)の実践
  -. GTDツール：Todiistの評価
+. 仮想化環境管理
  -. ステージング環境
  -. 仮想化ニーズ　

ターゲット読者
=========================

アプリケーションソフトウェアの｛設計,開発,製造,テスト,運用,保守}しており
本稿は、IT業界








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































bディレクター
    b. 個人向けサービス

2.


 情報処理サービス業界（SI業界）
    「3.ソフトウェア業界」「４．ハードウェア業界」両方をかばー＾が多い
    a. ITコンサル
    b. セールスエンジニア

3. ソフトウェア業界
4. ハードウェア業界






.. rubric::脚注

  [#] :term: `DevOps`

  [#] BA（BA：Business Analyst or Business0 Analysis）
      Business Analist:ビジネスアナリスト
      Business Analysis: システム業務分析　:term:`BABOK` 参照

  [#] 人と人とではあるが、あるべき業務フローを既述していた

  [#] 今は死語かもしれませんが


























































































































































































































































































































































































































































































































































































います。[#]_ [#]_　[#]_


翌年5月、正式にシステム部に配属となり、プログラムの開発研修がスタートしました。

.. rubric:: 脚注

.. [#]SeinからSollenは生まれない（As_is  から　To_be は生まれない）

.. [#]Sollenは自分たちが主体になって「変えていくべき組織の目的を、できるだけ具体的な
レベルで、成果を大きく取得することを狙って顧客目線で、本来どうあるべきかを再定義する
ことからしか生まれない

.. [#]入社時点での1年間の研修は、用語集の作成
コンサルが詳しくないフィールド分野に入る場合、
用語集の準備として実施するものである。


その後数年間でジリジリと貧しくなる」の略で、もともとは第一次世界大戦後、
    |不況のため次第に業績が悪化していく企業をさし資に対して効果の恩恵に浴する部門が存在する。
をつかって
必要であれば反
対をしないのが一般的だろう。しかし、本業以外の投資はできるだけ避けたい、
できるだけ費用を抑え意向・要望は将来に亘って発生するものと、考えていたため
でした。

IT部門が本業部門でないとの認識する立場からすると、

この意向・要望と向き合うことは、ITを扱う会社の宿命と割り切った　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　上で、
生産性の向上に取り組んできましたが、この「生産性の向上」対策は、終わりのない競争の
ように思われ、「永遠の課題」と呼んでいました。

その後、取り上げる気持ちが萎えてしまいました。





  「生産性の向上」対策
    経営・他部門の視点
    問題とされるのは
      システム開発・導入・保守の投資費用が高いである

    指標は、下記のもので指示される、または判断される。
      +. 投資額の絶対額
      +. 投資効果計算の投資回収期間
      +. 付加価値労働生産性（従業員一人当たりの平均限界利益額[#]_ ）


.. rubric::脚注

..[#] 限界利益額とは製品売上額から製品に見合う材料などの仕入金額（変動費）を減じたもの
      　
    重要関心事項は
        どうやって限界利益を回収するのかのストーリ作り
        （担当がシステムのオーナ部門であるのは認識しながらも）

  生産製を論ずるソフトウェア開発担当の視点
    問題とするのは
    は周知の事実である。
      現在開発中のProjectと過去のProjectとの生産性の違いとその要因
      （投資額を減らす対策や売り上げを増やして限界利益を増やすことに
    指標は
      System規模または開発規模　
        見積もり工数または実績投入時間（工数換算）と規模の関係とであり、
        生産性＝開発規模/工数

    関心事項
        ・規模集計のテーマ：プログラム言語による規模の測定の補正方法
          （FP法に統一される方向で進んでは、いるが…）

「残業規制」の強化が進む日本にあって、ソフトウェア開発にも需要変動がある中で



        　開発標準、開発言語、Tool、ミドルソフトウェアなどの開発環境が上記２つの
        　生産性を決めるのに大きく関与している。



      この開発環境の学習コストをどう回収するかと取り組み意欲を維持させられるかが課題。
